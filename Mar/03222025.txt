#sorted
x = [(2,0),(1,-1),(3,-1),(0,1)]
out=sorted(x,key=lambda a:a[0]) #
print(out)

==============
**TASK1
given number is armstrong or not 
def isArmstrong(num):
    bkp = num
    cnt=0
    while num >0:
    num=num//10
    cnt=cnt+1
num=bkp
    while num>0:
    num=num+num**cnt
    num=num//10
    if num == 0:
        return True
    else:
        return False
print(isArmstrong(153))

==================================================
Object Oriented Programming

class A:
    def display(self): #its called method, not function,  compulsary we need to add self
        print('hello')
    def innerfun(self):
        print('bye')
a=A()
a.display()
a.innerfun()
#Class - is a plan < A
#object - realtime entity < a
#method - display and innerfun
=============
#sum of two no's in oop
#incase you want parameter in oop
#__init__() - this has to be used
class Calc:
    #create instance of a variable
    def __init__(self,a,b): #contructor magic method, 
        self.bushan=a #self.a is reference, we can also change  anything
        self.srinivas=b #self.b is instance of variable b
    def add(self):
        print(self.bushan+self.srinivas)
    def multi(self):
        print(self.bushan*self.srinivas)

c=Calc(10,20)
a.add()

=====================
#name,age,m1,m2
#i want name and age
# avg of marks
# grade

class Student:
    def __init__(self,name,age,m1,m2):
        self.name=name
        self.age=age
        self.maths=m1
        self.cs=m2
    def info(self):
        print(self.name,self.age)
    def getavg(self):
        return(self.math+self.cs)//2
    def grade(self):
        avg=self.getavg() #we are calling getsvg along with self
        if avg>70:
            grade='A'
        elif avg>60:
            grade='B'
        else:
            grade='C'
        msg='{} has secured {} grade'.format(self.name, self.grade)
        return msg
s=Student('rama',30,45,70)
s.info()
res=s.getavg()
print(res)
out=grade()
print(out)

#Access Modifier
#1 public access Modifier #before execution of project, we going to modify variable value
class Student:
    def __init__(self,name,marks):
        self.name = name
        self.marks = marks
    def info(self):
        print(self.name,self.marks)
    def getsign(self):
        if self.marks>70:
            print('dad will sign')
        else:
            print('dad will discuss in school')
s=Student('rama',60)
s.marks=80 #public access modifiers
s.info()
s.getsign()

#2 private access Modifier
class Student:
    def __init__(self,name,marks):
        self.name = name
        self.__marks = marks
    def info(self):
        print(self.name,self.__marks)
    def getsign(self):
        if self.__marks>70:
            print('dad will sign')
        else:
            print('dad will discuss in school')
s=Student('rama',60)
s.marks=80 #public access modifiers, but still it wont change as we have hardened the 
s.info()
s.getsign()

===============
**TASK2 - bank: input - name of customer, account number, amount - write it for private access modifiers
=================
#OOP - inheritence, Polymorphism, encapsulation
inheritence - aquiring one class properties to another class, 
    1 single
        one class properties to another class
            super/parent class >> subclass/child class
            Class A:
                def display(self):
                    print('display from A class')
            class B(A):
                pass
            b = B()
            b.display()
            #Output will be Display from A class
    2 multilevel

    3 multiple
    4 hybrid
    5 hyrarchy

# banks --sbi, icici, hdfc
# principle, tenure, rate of interest

class Bank:
    def __init__(self,p,t,r)
        self.p=p
        self.t=t
        self.roi=r
    def simpleint(self):
        return(self.p*self.t*self.roi)//100
save the file

from bank import Bank
b=Bank(1000,10,10)
amt = b.simpleint()
print(amt)
**TASK3 - get avg of ratings
